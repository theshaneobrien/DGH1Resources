//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player - In Game"",
            ""id"": ""6c95aaa8-74ad-464f-bd74-9d461581c7d6"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c978a0e8-138c-40a2-8905-c311e39a330a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""22b6ce2a-0d8a-4c38-88e8-64ff0f5081a2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""64792ff0-6e11-4535-b81c-60391b35b7d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""643a2f68-3b79-4c90-81aa-378ada9110ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0a680635-c41f-474e-a3d2-3075f8e9620e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3bbc3598-1b9c-402a-8636-a769ba70d9e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b651c580-d830-42e2-8933-c6d132f83e1a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""490476f2-67db-4a3b-aff1-e101b110c9a2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""37a15e84-b536-4984-8bff-23e0ad82cdda"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Thumbstick"",
                    ""id"": ""3157e65a-cfd8-4726-bd12-a1e6ffe0275a"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d4888569-7833-487f-a3a5-464aaf2f160a"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""711814db-74b1-4aed-865d-5802a04e2868"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad6cc70b-d0c9-4231-8637-ced36cda697b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""61fe6dcb-53f9-4544-8fbc-266a152b9e88"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Primary Touch Screen "",
                    ""id"": ""c5944a1e-d6c9-4069-aa39-b3fd092309be"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""214e2052-c228-4bf8-88bf-9897cf6771f7"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a56aa794-5751-4387-a501-df96456665c8"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5ff92bdd-8bf5-4e5a-9aa1-e87becd76da4"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""24c5a45d-71be-4c07-ab04-396561cbc876"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse Look"",
                    ""id"": ""c2e101d5-cdc1-4294-b5d4-96a544917028"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""33f54e2d-03bd-4c9d-a7ee-ff434e7321b1"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4caeca4d-00cb-46f8-8192-018dca1d575d"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""07020031-c995-4ed1-89c1-85981021df9c"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d9e8340f-231c-4ed7-a821-6ec624374bc2"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right Thumbstick"",
                    ""id"": ""a4a4438b-60b5-4cff-9604-ed625e803769"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""92073e06-501a-456f-b811-b4db6c1fe1d2"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b70094e3-4032-4daa-9bc8-dbec8c6337c4"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""14c7c5ff-79ac-4f33-9429-624ec8549c7c"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""646cf9f6-21f1-420e-94d4-a6753d421bcc"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Secondary Touch Screen"",
                    ""id"": ""5ac70b5c-0f9e-456d-a3dd-9bbd942e9e5a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""82b1dd51-05d6-421e-a8d2-f2dbbff96855"",
                    ""path"": ""<Touchscreen>/touch1/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e2d45302-2f47-48b0-97a9-4eb5a190fcfc"",
                    ""path"": ""<Touchscreen>/touch1/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aad5e66d-10f5-4932-82d2-6938a707b602"",
                    ""path"": ""<Touchscreen>/touch1/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b88594d8-64a2-4d99-9dbf-ee8c4efb4c00"",
                    ""path"": ""<Touchscreen>/touch1/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""912458f6-a436-46da-86cd-981c7f644acb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29eac4b2-ab44-4d55-a09a-43d77305d90b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""720f59cf-c85f-44d5-8287-1d8a8583ddbc"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea8e8297-4ab7-4b1d-b4ff-5fc421e102b7"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player - Weapons"",
            ""id"": ""586c95cb-698f-448a-82fe-40d59a917da9"",
            ""actions"": [
                {
                    ""name"": ""Fire Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""50554888-b7f3-4976-9f90-c4ba6897ca5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""4f8edfbc-1f8e-4446-8ec4-97d3af974358"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotswap"",
                    ""type"": ""Button"",
                    ""id"": ""91920d90-f38e-4e2d-a3f1-1c0f5db482e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Weapon - Next"",
                    ""type"": ""Button"",
                    ""id"": ""b1eabb2b-9718-421e-a932-77ffb475c81b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Weapon - Previous"",
                    ""type"": ""Button"",
                    ""id"": ""10347de8-c452-40bc-ab55-85180a175201"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon Slot 1"",
                    ""type"": ""Button"",
                    ""id"": ""3cf7ff2e-72d5-4c49-baf6-c75839871294"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon Slot 2"",
                    ""type"": ""Button"",
                    ""id"": ""76e16187-0b3f-46ee-ad9a-9465b046ab7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon Slot 3"",
                    ""type"": ""Button"",
                    ""id"": ""51e59c7b-6ef4-4d8a-a9e9-05b7817fff82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4ef3773-9702-41b6-99be-718660ba7e5c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f64217c8-75b3-4ee3-ae1d-113fcbdae52a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4a21ef5-2dae-4191-b45c-e48e08d4918e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1dfcb72-130e-49c8-94b2-dfc49af637ac"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e4a8f1f-f8ba-41d1-845c-835de1d1280c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotswap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70751177-c34d-49e5-86a0-f3648b990abf"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotswap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e0a4ada-462a-4624-b6d9-a2e64cfca596"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapon - Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef763c1f-b3d6-4745-9cfa-270833b3c760"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapon - Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c56676e4-b8cf-452d-b71f-11c32c23203b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapon - Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50713a4e-08f9-4542-a256-c742b2deda8f"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapon - Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7f82127-cd30-4bcb-bc36-84fff30ff6c0"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon Slot 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2dded13-9c23-490a-830a-081fcbd1b360"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon Slot 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e0d1cf1-f8d3-4ed0-b789-040aabb02034"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon Slot 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player - Main Menu"",
            ""id"": ""d7afe69f-f403-4628-84e7-6818fb2a4127"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""018fb9af-980c-4f4c-84f3-6a104fe3ee10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c6c7a5b9-3831-4737-90b5-cd6723fd0d9f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player - Base"",
            ""id"": ""2be5d4d7-e6e3-4ed6-a268-63ab80e5e981"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""27b83aa9-5fef-4563-929c-74c89cc29ab6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4dc4b76-0a39-4d39-bf60-d5f3c43d140b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player - In Game
        m_PlayerInGame = asset.FindActionMap("Player - In Game", throwIfNotFound: true);
        m_PlayerInGame_Movement = m_PlayerInGame.FindAction("Movement", throwIfNotFound: true);
        m_PlayerInGame_Look = m_PlayerInGame.FindAction("Look", throwIfNotFound: true);
        m_PlayerInGame_Jump = m_PlayerInGame.FindAction("Jump", throwIfNotFound: true);
        m_PlayerInGame_Sprint = m_PlayerInGame.FindAction("Sprint", throwIfNotFound: true);
        // Player - Weapons
        m_PlayerWeapons = asset.FindActionMap("Player - Weapons", throwIfNotFound: true);
        m_PlayerWeapons_FireWeapon = m_PlayerWeapons.FindAction("Fire Weapon", throwIfNotFound: true);
        m_PlayerWeapons_Reload = m_PlayerWeapons.FindAction("Reload", throwIfNotFound: true);
        m_PlayerWeapons_Hotswap = m_PlayerWeapons.FindAction("Hotswap", throwIfNotFound: true);
        m_PlayerWeapons_ChangeWeaponNext = m_PlayerWeapons.FindAction("Change Weapon - Next", throwIfNotFound: true);
        m_PlayerWeapons_ChangeWeaponPrevious = m_PlayerWeapons.FindAction("Change Weapon - Previous", throwIfNotFound: true);
        m_PlayerWeapons_WeaponSlot1 = m_PlayerWeapons.FindAction("Weapon Slot 1", throwIfNotFound: true);
        m_PlayerWeapons_WeaponSlot2 = m_PlayerWeapons.FindAction("Weapon Slot 2", throwIfNotFound: true);
        m_PlayerWeapons_WeaponSlot3 = m_PlayerWeapons.FindAction("Weapon Slot 3", throwIfNotFound: true);
        // Player - Main Menu
        m_PlayerMainMenu = asset.FindActionMap("Player - Main Menu", throwIfNotFound: true);
        m_PlayerMainMenu_Newaction = m_PlayerMainMenu.FindAction("New action", throwIfNotFound: true);
        // Player - Base
        m_PlayerBase = asset.FindActionMap("Player - Base", throwIfNotFound: true);
        m_PlayerBase_Newaction = m_PlayerBase.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player - In Game
    private readonly InputActionMap m_PlayerInGame;
    private IPlayerInGameActions m_PlayerInGameActionsCallbackInterface;
    private readonly InputAction m_PlayerInGame_Movement;
    private readonly InputAction m_PlayerInGame_Look;
    private readonly InputAction m_PlayerInGame_Jump;
    private readonly InputAction m_PlayerInGame_Sprint;
    public struct PlayerInGameActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerInGameActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerInGame_Movement;
        public InputAction @Look => m_Wrapper.m_PlayerInGame_Look;
        public InputAction @Jump => m_Wrapper.m_PlayerInGame_Jump;
        public InputAction @Sprint => m_Wrapper.m_PlayerInGame_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInGameActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInGameActions instance)
        {
            if (m_Wrapper.m_PlayerInGameActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnLook;
                @Jump.started -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnJump;
                @Sprint.started -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerInGameActionsCallbackInterface.OnSprint;
            }
            m_Wrapper.m_PlayerInGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
            }
        }
    }
    public PlayerInGameActions @PlayerInGame => new PlayerInGameActions(this);

    // Player - Weapons
    private readonly InputActionMap m_PlayerWeapons;
    private IPlayerWeaponsActions m_PlayerWeaponsActionsCallbackInterface;
    private readonly InputAction m_PlayerWeapons_FireWeapon;
    private readonly InputAction m_PlayerWeapons_Reload;
    private readonly InputAction m_PlayerWeapons_Hotswap;
    private readonly InputAction m_PlayerWeapons_ChangeWeaponNext;
    private readonly InputAction m_PlayerWeapons_ChangeWeaponPrevious;
    private readonly InputAction m_PlayerWeapons_WeaponSlot1;
    private readonly InputAction m_PlayerWeapons_WeaponSlot2;
    private readonly InputAction m_PlayerWeapons_WeaponSlot3;
    public struct PlayerWeaponsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerWeaponsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @FireWeapon => m_Wrapper.m_PlayerWeapons_FireWeapon;
        public InputAction @Reload => m_Wrapper.m_PlayerWeapons_Reload;
        public InputAction @Hotswap => m_Wrapper.m_PlayerWeapons_Hotswap;
        public InputAction @ChangeWeaponNext => m_Wrapper.m_PlayerWeapons_ChangeWeaponNext;
        public InputAction @ChangeWeaponPrevious => m_Wrapper.m_PlayerWeapons_ChangeWeaponPrevious;
        public InputAction @WeaponSlot1 => m_Wrapper.m_PlayerWeapons_WeaponSlot1;
        public InputAction @WeaponSlot2 => m_Wrapper.m_PlayerWeapons_WeaponSlot2;
        public InputAction @WeaponSlot3 => m_Wrapper.m_PlayerWeapons_WeaponSlot3;
        public InputActionMap Get() { return m_Wrapper.m_PlayerWeapons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerWeaponsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerWeaponsActions instance)
        {
            if (m_Wrapper.m_PlayerWeaponsActionsCallbackInterface != null)
            {
                @FireWeapon.started -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnFireWeapon;
                @FireWeapon.performed -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnFireWeapon;
                @FireWeapon.canceled -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnFireWeapon;
                @Reload.started -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnReload;
                @Hotswap.started -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnHotswap;
                @Hotswap.performed -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnHotswap;
                @Hotswap.canceled -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnHotswap;
                @ChangeWeaponNext.started -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnChangeWeaponNext;
                @ChangeWeaponNext.performed -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnChangeWeaponNext;
                @ChangeWeaponNext.canceled -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnChangeWeaponNext;
                @ChangeWeaponPrevious.started -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnChangeWeaponPrevious;
                @ChangeWeaponPrevious.performed -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnChangeWeaponPrevious;
                @ChangeWeaponPrevious.canceled -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnChangeWeaponPrevious;
                @WeaponSlot1.started -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnWeaponSlot1;
                @WeaponSlot1.performed -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnWeaponSlot1;
                @WeaponSlot1.canceled -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnWeaponSlot1;
                @WeaponSlot2.started -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnWeaponSlot2;
                @WeaponSlot2.performed -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnWeaponSlot2;
                @WeaponSlot2.canceled -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnWeaponSlot2;
                @WeaponSlot3.started -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnWeaponSlot3;
                @WeaponSlot3.performed -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnWeaponSlot3;
                @WeaponSlot3.canceled -= m_Wrapper.m_PlayerWeaponsActionsCallbackInterface.OnWeaponSlot3;
            }
            m_Wrapper.m_PlayerWeaponsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FireWeapon.started += instance.OnFireWeapon;
                @FireWeapon.performed += instance.OnFireWeapon;
                @FireWeapon.canceled += instance.OnFireWeapon;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Hotswap.started += instance.OnHotswap;
                @Hotswap.performed += instance.OnHotswap;
                @Hotswap.canceled += instance.OnHotswap;
                @ChangeWeaponNext.started += instance.OnChangeWeaponNext;
                @ChangeWeaponNext.performed += instance.OnChangeWeaponNext;
                @ChangeWeaponNext.canceled += instance.OnChangeWeaponNext;
                @ChangeWeaponPrevious.started += instance.OnChangeWeaponPrevious;
                @ChangeWeaponPrevious.performed += instance.OnChangeWeaponPrevious;
                @ChangeWeaponPrevious.canceled += instance.OnChangeWeaponPrevious;
                @WeaponSlot1.started += instance.OnWeaponSlot1;
                @WeaponSlot1.performed += instance.OnWeaponSlot1;
                @WeaponSlot1.canceled += instance.OnWeaponSlot1;
                @WeaponSlot2.started += instance.OnWeaponSlot2;
                @WeaponSlot2.performed += instance.OnWeaponSlot2;
                @WeaponSlot2.canceled += instance.OnWeaponSlot2;
                @WeaponSlot3.started += instance.OnWeaponSlot3;
                @WeaponSlot3.performed += instance.OnWeaponSlot3;
                @WeaponSlot3.canceled += instance.OnWeaponSlot3;
            }
        }
    }
    public PlayerWeaponsActions @PlayerWeapons => new PlayerWeaponsActions(this);

    // Player - Main Menu
    private readonly InputActionMap m_PlayerMainMenu;
    private IPlayerMainMenuActions m_PlayerMainMenuActionsCallbackInterface;
    private readonly InputAction m_PlayerMainMenu_Newaction;
    public struct PlayerMainMenuActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMainMenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_PlayerMainMenu_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMainMenuActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMainMenuActions instance)
        {
            if (m_Wrapper.m_PlayerMainMenuActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_PlayerMainMenuActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_PlayerMainMenuActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_PlayerMainMenuActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_PlayerMainMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public PlayerMainMenuActions @PlayerMainMenu => new PlayerMainMenuActions(this);

    // Player - Base
    private readonly InputActionMap m_PlayerBase;
    private IPlayerBaseActions m_PlayerBaseActionsCallbackInterface;
    private readonly InputAction m_PlayerBase_Newaction;
    public struct PlayerBaseActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerBaseActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_PlayerBase_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBase; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBaseActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerBaseActions instance)
        {
            if (m_Wrapper.m_PlayerBaseActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_PlayerBaseActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_PlayerBaseActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_PlayerBaseActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_PlayerBaseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public PlayerBaseActions @PlayerBase => new PlayerBaseActions(this);
    public interface IPlayerInGameActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IPlayerWeaponsActions
    {
        void OnFireWeapon(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnHotswap(InputAction.CallbackContext context);
        void OnChangeWeaponNext(InputAction.CallbackContext context);
        void OnChangeWeaponPrevious(InputAction.CallbackContext context);
        void OnWeaponSlot1(InputAction.CallbackContext context);
        void OnWeaponSlot2(InputAction.CallbackContext context);
        void OnWeaponSlot3(InputAction.CallbackContext context);
    }
    public interface IPlayerMainMenuActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IPlayerBaseActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
